import React, { useState, useContext } from 'react';
import styles from "./AddJournal.module.css";
import { AuthContext } from '../../../contexts/AuthContext';

const monthOptions = [
    { label: '–Ø–Ω–≤–∞—Ä—å', value: 1 },
    { label: '–§–µ–≤—Ä–∞–ª—å', value: 2 },
    { label: '–ú–∞—Ä—Ç', value: 3 },
    { label: '–ê–ø—Ä–µ–ª—å', value: 4 },
    { label: '–ú–∞–π', value: 5 },
    { label: '–ò—é–Ω—å', value: 6 },
    { label: '–ò—é–ª—å', value: 7 },
    { label: '–ê–≤–≥—É—Å—Ç', value: 8 },
    { label: '–°–µ–Ω—Ç—è–±—Ä—å', value: 9 },
    { label: '–û–∫—Ç—è–±—Ä—å', value: 10 },
    { label: '–ù–æ—è–±—Ä—å', value: 11 },
    { label: '–î–µ–∫–∞–±—Ä—å', value: 12 },
];

const AddJournal = () => {
    const { token } = useContext(AuthContext);

    const [issue, setIssue] = useState('');
    const [year, setYear] = useState('');
    const [month, setMonth] = useState('');
    const [description, setDescription] = useState('');
    const [publicationDate, setPublicationDate] = useState('');
    const [loading, setLoading] = useState(false);

    const resetForm = () => {
        setIssue('');
        setYear('');
        setMonth('');
        setDescription('');
        setPublicationDate('');
    };

    const handleSubmit = async (e) => {
        e.preventDefault();

        if (!token) {
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É');
            return;
        }

        if (!issue || !year || !month || !publicationDate) {
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
            return;
        }

        const issueNum = Number(issue);
        const yearNum = Number(year);
        const monthNum = Number(month);

        if (isNaN(issueNum) || isNaN(yearNum) || isNaN(monthNum)) {
            alert('Issue, –≥–æ–¥ –∏ –º–µ—Å—è—Ü –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏');
            return;
        }

        const currentYear = new Date().getFullYear();
        if (yearNum < 1900 || yearNum > currentYear + 1) {
            alert('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥');
            return;
        }

        const dateParts = publicationDate.split('.');
        if (dateParts.length !== 3) {
            alert('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ DD.MM.YYYY');
            return;
        }

        const [dayStr, monthStr, yearStr] = dateParts;
        const day = Number(dayStr);
        const pubMonth = Number(monthStr);
        const pubYear = Number(yearStr);

        if (
            isNaN(day) || isNaN(pubMonth) || isNaN(pubYear) ||
            pubMonth < 1 || pubMonth > 12 || day < 1 || day > 31
        ) {
            alert('–ù–µ–≤–µ—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–∞—Ç—ã');
            return;
        }

        const pubDate = new Date(pubYear, pubMonth - 1, day);
        if (isNaN(pubDate.getTime())) {
            alert('–ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏');
            return;
        }

        const payload = {
            issue: issueNum,
            year: yearNum,
            month: monthNum,
            description: description.trim() || null,
            publicationDate: pubDate.toISOString(),
        };

        console.log("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö:", payload);

        try {
            setLoading(true);

            const res = await fetch(`${process.env.REACT_APP_API_URL}/admin/journals`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    Authorization: `Bearer ${token}`,
                },
                body: JSON.stringify(payload),
            });

            const data = await res.json();

            if (!res.ok) {
                const errorMessage = data.error || data.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
                alert(`–û—à–∏–±–∫–∞: ${errorMessage}`);
                return;
            }

            alert(`–ñ—É—Ä–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω! ID: ${data.id}`);
            resetForm();
        } catch (err) {
            console.error(err);
            alert('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
        } finally {
            setLoading(false);
        }
    };

    return (
        <form className={styles.formContainer} onSubmit={handleSubmit}>
            <h2 className={styles.formTitle}>–î–æ–±–∞–≤–∏—Ç—å –∂—É—Ä–Ω–∞–ª</h2>

            <div className={styles.formGroup}>
                <label className={styles.label}>–í—ã–ø—É—Å–∫ (issue):</label>
                <input
                    className={styles.input}
                    type="number"
                    value={issue}
                    onChange={e => setIssue(e.target.value)}
                    required
                />
            </div>

            <div className={styles.formGroup}>
                <label className={styles.label}>–ì–æ–¥:</label>
                <input
                    className={styles.input}
                    type="number"
                    value={year}
                    onChange={e => setYear(e.target.value)}
                    required
                />
            </div>

            <div className={styles.formGroup}>
                <label className={styles.label}>–ú–µ—Å—è—Ü:</label>
                <select
                    className={styles.input}
                    value={month}
                    onChange={e => setMonth(e.target.value)}
                    required
                >
                    <option value="" disabled>–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü</option>
                    {monthOptions.map((m) => (
                        <option key={m.value} value={m.value}>{m.label}</option>
                    ))}
                </select>
            </div>

            <div className={styles.formGroup}>
                <label className={styles.label}>–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</label>
                <input
                    className={styles.input}
                    type="text"
                    value={publicationDate}
                    onChange={e => setPublicationDate(e.target.value)}
                    placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 20.07.2025"
                    required
                />
            </div>

            <div className={styles.formGroup}>
                <label className={styles.label}>–û–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):</label>
                <textarea
                    className={styles.textarea}
                    value={description}
                    onChange={e => setDescription(e.target.value)}
                    rows={4}
                    placeholder="–û–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞, —Ç–µ–º—ã –≤—ã–ø—É—Å–∫–∞ –∏ —Ç.–¥."
                />
            </div>

            <button
                className={styles.button}
                type="submit"
                disabled={loading}
            >
                {loading ? '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ...' : '–î–æ–±–∞–≤–∏—Ç—å –∂—É—Ä–Ω–∞–ª'}
            </button>
        </form>
    );
};

export default AddJournal;
